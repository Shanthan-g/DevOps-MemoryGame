# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on: [push]
jobs:
#   Mysql:
#     runs-on: ubuntu-latest
#     services:
#       mysql:
#         image: mysql:5.7
#         env:
#           MYSQL_ROOT_PASSWORD: password
#           MYSQL_DATABASE: test
#         ports:
#             - '3306:3306'
#         options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
#     steps:
#       - uses: actions/checkout@v1
#       - run: mysql -h 127.0.0.1 --port 3306 -u root -ppassword -e 'CREATE DATABASE IF NOT EXISTS testgame;'

  Docker-build:
#     needs: Mysql

    runs-on: ubuntu-latest

#     strategy:
#       matrix:
# #         node-version: [12.x, 14.x, 16.x]
# #         # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

#     services:
#       mysql:
#         image: mysql:5.7
#         env:
#           MYSQL_ROOT_PASSWORD: password
#           MYSQL_DATABASE: test
#         ports:
#             - '3306:3306'
#         options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
#     steps:
#     - uses: actions/checkout@v1
#     - run: mysql -h 127.0.0.1 --port 3306 -u root -ppassword -e 'CREATE DATABASE IF NOT EXISTS testgame;'
#     - uses: actions/checkout@v1
#     - run: SHOW DATABASES;


    steps:
    - uses: actions/checkout@v3
    #- uses: actions/setup-node@v3
    - name: List files in the repository
      run: |
          ls
    - name: pwd  the repository
      run: |
          pwd
    - name: cd to server
      run: |
          cd server
    - name: List files in the repository
      run: |
          ls
    - name: npm ci
      working-directory: ./server
      run: npm ci
#     - name: npm run buildddd   
#       run: npm run build --if-present
    
#     - name: mysql build 
#       run : 
    - name: mysql version
      run : mysql -V
      
    - run: mysql.server start

    - name: mysql ping check
      run: mysql -h 127.0.0.1 --port 3306 -u root -p${{secrets.MYSQL_ROOT}} -e 'CREATE DATABASE IF NOT EXISTS testgame;'

    - name: testttt
      working-directory: ./server
      run: npm test
#     - run: npm test


    - name: Build the Docker image
      run: docker build . --file ./Dockerfile --tag madhavpasumarthy/memgame
   
    - name: Docker Login
      env: 
        Docker_Usr: ${{secrets.DOCKER_USER}}
        Docker_Pwd: ${{secrets.DOCKER_PWD}}
#       run: echo "$DOCKERUSER"
#       run: echo "$DOCKERPWD"

      run: docker login -u $Docker_Usr -p $Docker_Pwd

    - name: Build the Docker image
      run: docker push ${{secrets.DOCKER_USER}}/memgame

#     - name: Use Node.js ${{ matrix.node-version }}
#       uses: actions/setup-node@v3
#       with:
#         node-version: ${{ matrix.node-version }}
#         cache: 'npm'
#     - run: npm ci
#     - run: npm run build --if-present
#     - run: npm test


  deploy:

    needs: Docker-build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/ansible
      env:
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
